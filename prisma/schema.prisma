generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// Main user account (SaaS subscriber)
model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  email          String    @unique
  name           String?
  hashedPassword String
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  
  // Subscription related fields
  isActive       Boolean   @default(true)
  subscriptionStatus String @default("trial") // trial, active, cancelled, expired
  subscriptionEndDate DateTime?
  
  // One user can have one website
  website        Website?
  
  // User's published documents
  documents      Document[]
}

// Website configuration for each user
model Website {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  subdomain   String   @unique // e.g., "johndoe.yoursaas.com"
  customDomain String? // Optional custom domain
  
  // Theme and styling
  theme       String   @default("default")
  primaryColor String  @default("#000000")
  
  // Navigation and layout settings
  title       String   @default("My Website")
  description String?
  
  // Relationship to user (owner)
  userId      String   @unique @db.ObjectId
  user        User     @relation(fields: [userId], references: [id])
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// Published documents
model Document {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  content     String   // Could store HTML or Markdown
  slug        String   // URL-friendly version of title
  
  // Publishing status
  isPublished Boolean  @default(false)
  publishedAt DateTime?
  
  // SEO fields
  metaTitle   String?
  metaDescription String?
  
  // Document organization
  tags        String[]
  category    String?
  
  // Relationship to user (author)
  userId      String   @db.ObjectId
  user        User     @relation(fields: [userId], references: [id])
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([userId, slug]) // Ensure unique slugs per user
}

// Analytics (optional - for tracking visitor data)
model PageView {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  path        String   // URL path viewed
  userAgent   String?  // Browser/device info
  ipAddress   String?  // Visitor IP
  referrer    String?  // Where the visitor came from
  
  // Relations
  websiteId   String   @db.ObjectId
  
  createdAt   DateTime @default(now())
}